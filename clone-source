#!/bin/bash
DIR="$(realpath $(dirname "${BASH_SOURCE[0]}"))"  # Get the directory name

function clone_source() {
  local PACKAGE
  PACKAGE="$1"
  local PACKAGE_DIR
  PACKAGE_DIR="$(realpath "${PACKAGE}")"
  local PACKAGE_MK="${PACKAGE}/package.info"
  local SOURCE_DIR="${PACKAGE}/source"
  local SOURCE_DOCKER_DIR=source
  if [[ -z "$PACKAGE" ]]; then
    echo "Please specify package: $0 <package>"
    exit 1
  elif [[ ! -d "$PACKAGE" ]]; then
    echo "Please specify a package directory that exists.  Not: $PACKAGE"
    exit 1
  elif [[ ! -f "$PACKAGE_MK" ]]; then
    echo "No package.mk found at: $PACKAGE_MK"
    exit 1
  fi
  GET_HANDLER_SUPPORT=""
  PKG_VERSION=""
  PKG_URL=""
  source "${PACKAGE_MK}"
  
  if [[ "${GET_HANDLER_SUPPORT}" == "git" ]]; then
  
     if [[ -a "${PKG_VERSION}" ]]; then
       echo "${PKG_VERSION} required"
       exit 1
     fi
     ALREADY_CLONED=false
     if [[ -d "${SOURCE_DIR}" ]]; then
        pushd "${SOURCE_DIR}" &> /dev/null
        if [[ "$(git config --get remote.origin.url)" == "$PKG_URL" ]]; then
          git fetch
          ALREADY_CLONED="true"
        fi
        popd &> /dev/null
     fi
     if [[ "$ALREADY_CLONED" == "false" ]]; then
        rm -rf "${SOURCE_DIR}"
        git clone --recursive "${PKG_URL}" "${SOURCE_DIR}"
     fi
  
     echo "Checking out: ${PKG_VERSION}"
     pushd "${SOURCE_DIR}" &> /dev/null
     git submodule update --init --recursive
     git clean -fd
     git checkout "${PKG_VERSION}"
     popd &> /dev/null
  elif [[ -z "${GET_HANDLER_SUPPORT}" ]]; then
    SOURCE_DIR="${PACKAGE}"
    SOURCE_DOCKER_DIR=""
    BUILD_DIR="."
    mkdir -p "${SOURCE_DIR}"
    echo "No GET_HANDLER_SUPPORT.  Assuming all local files"
  else
    echo "Handler: '${GET_HANDLER_SUPPORT}' not found"
    exit 1
  fi
}